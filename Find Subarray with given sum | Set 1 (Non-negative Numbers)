public class Solution {
    
    public static int subArraySum(int arr[], int n, int sum)
    {
        int current_sum = arr[0];
        int start = 0;

        for(int i = 1;i<n;i++){
            while(current_sum>sum && start<i-1){
                current_sum=current_sum-arr[start];
                start++;
            }

            if(current_sum==sum){
                System.out.println(start+"Sum found between indexes "+i-1);
                return 1;
            }

            if(i<n)
                current_sum=current_sum+arr[i];
        }

        return -1;
    }
    public static void main(String[] args) {
        int arr[] = {15, 2, 4, 8, 9, 5, 10, 23};
        int n = arr.length;
        int sum = 23;
        subArraySum(arr, n, sum);
    }
}

import java.util.*;

public class GFG {
	public static List<Integer>
	findSubarrayWithGivenSum(List<Integer> arr, int sum)
	{
		Map<Integer, Integer> map = new HashMap<>();
		List<Integer> subarray = new ArrayList<>();
		int currSum = 0;
		for (int i = 0; i < arr.size(); i++) {
			currSum += arr.get(i);
			if (map.containsKey(currSum - sum)) {
				subarray = arr.subList(
					map.get(currSum - sum) + 1, i + 1);
				break;
			}
			map.put(currSum, i);
		}
		return subarray;
	}

	public static void main(String[] args)
	{
		List<Integer> arr
			= Arrays.asList(15, 2, 4, 8, 9, 5, 10, 23);
		List<Integer> subarray
			= findSubarrayWithGivenSum(arr, 23);
		if (subarray.isEmpty()) {
			System.out.println(
				"No subarray with given sum found");
		}
		else {
			System.out.print("Subarray: [ ");
			for (int i : subarray) {
				System.out.print(i + " ");
			}
			System.out.println("]");
		}
	}
}
